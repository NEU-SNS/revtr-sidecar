// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: revtr.proto

package pb

import (
	// _ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RevtrHopType int32

const (
	RevtrHopType_DUMMY                                         RevtrHopType = 0
	RevtrHopType_DST_REV_SEGMENT                               RevtrHopType = 1  // Hop from the destination
	RevtrHopType_DST_SYM_REV_SEGMENT                           RevtrHopType = 2  // Hop assumed symmetric
	RevtrHopType_TR_TO_SRC_REV_SEGMENT                         RevtrHopType = 3  // Exact intersection between traceroute atlas and reverse hop
	RevtrHopType_TR_TO_SRC_REV_SEGMENT_BETWEEN                 RevtrHopType = 4  // Intersection between a hop of a traceroute atlas and a reverse hop
	RevtrHopType_RR_REV_SEGMENT                                RevtrHopType = 5  // Record Route hop
	RevtrHopType_SPOOF_RR_REV_SEGMENT                          RevtrHopType = 6  // Spoofed Record Route hop
	RevtrHopType_TS_ADJ_REV_SEGMENT                            RevtrHopType = 7  // Timestamp hop
	RevtrHopType_SPOOF_TS_ADJ_REV_SEGMENT                      RevtrHopType = 8  // Spoofed timestamp hop
	RevtrHopType_SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO              RevtrHopType = 9  // Unused
	RevtrHopType_SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO_DOUBLE_STAMP RevtrHopType = 10 // Unused
)

// Enum value maps for RevtrHopType.
var (
	RevtrHopType_name = map[int32]string{
		0:  "DUMMY",
		1:  "DST_REV_SEGMENT",
		2:  "DST_SYM_REV_SEGMENT",
		3:  "TR_TO_SRC_REV_SEGMENT",
		4:  "TR_TO_SRC_REV_SEGMENT_BETWEEN",
		5:  "RR_REV_SEGMENT",
		6:  "SPOOF_RR_REV_SEGMENT",
		7:  "TS_ADJ_REV_SEGMENT",
		8:  "SPOOF_TS_ADJ_REV_SEGMENT",
		9:  "SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO",
		10: "SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO_DOUBLE_STAMP",
	}
	RevtrHopType_value = map[string]int32{
		"DUMMY":                                         0,
		"DST_REV_SEGMENT":                               1,
		"DST_SYM_REV_SEGMENT":                           2,
		"TR_TO_SRC_REV_SEGMENT":                         3,
		"TR_TO_SRC_REV_SEGMENT_BETWEEN":                 4,
		"RR_REV_SEGMENT":                                5,
		"SPOOF_RR_REV_SEGMENT":                          6,
		"TS_ADJ_REV_SEGMENT":                            7,
		"SPOOF_TS_ADJ_REV_SEGMENT":                      8,
		"SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO":              9,
		"SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO_DOUBLE_STAMP": 10,
	}
)

func (x RevtrHopType) Enum() *RevtrHopType {
	p := new(RevtrHopType)
	*p = x
	return p
}

func (x RevtrHopType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RevtrHopType) Descriptor() protoreflect.EnumDescriptor {
	return file_revtr_proto_enumTypes[0].Descriptor()
}

func (RevtrHopType) Type() protoreflect.EnumType {
	return &file_revtr_proto_enumTypes[0]
}

func (x RevtrHopType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RevtrHopType.Descriptor instead.
func (RevtrHopType) EnumDescriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{0}
}

type DestinationBasedRoutingType int32

const (
	DestinationBasedRoutingType_NO_CHECK       DestinationBasedRoutingType = 0
	DestinationBasedRoutingType_NO_VIOLATION   DestinationBasedRoutingType = 1
	DestinationBasedRoutingType_TUNNEL         DestinationBasedRoutingType = 2
	DestinationBasedRoutingType_LOAD_BALANCING DestinationBasedRoutingType = 3
)

// Enum value maps for DestinationBasedRoutingType.
var (
	DestinationBasedRoutingType_name = map[int32]string{
		0: "NO_CHECK",
		1: "NO_VIOLATION",
		2: "TUNNEL",
		3: "LOAD_BALANCING",
	}
	DestinationBasedRoutingType_value = map[string]int32{
		"NO_CHECK":       0,
		"NO_VIOLATION":   1,
		"TUNNEL":         2,
		"LOAD_BALANCING": 3,
	}
)

func (x DestinationBasedRoutingType) Enum() *DestinationBasedRoutingType {
	p := new(DestinationBasedRoutingType)
	*p = x
	return p
}

func (x DestinationBasedRoutingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DestinationBasedRoutingType) Descriptor() protoreflect.EnumDescriptor {
	return file_revtr_proto_enumTypes[1].Descriptor()
}

func (DestinationBasedRoutingType) Type() protoreflect.EnumType {
	return &file_revtr_proto_enumTypes[1]
}

func (x DestinationBasedRoutingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DestinationBasedRoutingType.Descriptor instead.
func (DestinationBasedRoutingType) EnumDescriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{1}
}

type RevtrStatus int32

const (
	RevtrStatus_DUMMY_X   RevtrStatus = 0
	RevtrStatus_RUNNING   RevtrStatus = 1
	RevtrStatus_COMPLETED RevtrStatus = 2
	RevtrStatus_CANCELED  RevtrStatus = 3
)

// Enum value maps for RevtrStatus.
var (
	RevtrStatus_name = map[int32]string{
		0: "DUMMY_X",
		1: "RUNNING",
		2: "COMPLETED",
		3: "CANCELED",
	}
	RevtrStatus_value = map[string]int32{
		"DUMMY_X":   0,
		"RUNNING":   1,
		"COMPLETED": 2,
		"CANCELED":  3,
	}
)

func (x RevtrStatus) Enum() *RevtrStatus {
	p := new(RevtrStatus)
	*p = x
	return p
}

func (x RevtrStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RevtrStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_revtr_proto_enumTypes[2].Descriptor()
}

func (RevtrStatus) Type() protoreflect.EnumType {
	return &file_revtr_proto_enumTypes[2]
}

func (x RevtrStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RevtrStatus.Descriptor instead.
func (RevtrStatus) EnumDescriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{2}
}

// Reverse Traceroute measurement
// Terminology: run a reverse traceroute back from the destination to the source where the source is controlled by us and the
// destination is uncontrolled.
type RevtrMeasurement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src                          string                        `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Dst                          string                        `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
	Staleness                    uint32                        `protobuf:"varint,3,opt,name=staleness,proto3" json:"staleness,omitempty"`                                                                                 // Should not be modified, uses the 24 hours threshold described in the REVTR 2.0 paper.
	Id                           uint32                        `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`                                                                                               // Should not be modified.
	BackoffEndhost               bool                          `protobuf:"varint,5,opt,name=backoff_endhost,json=backoffEndhost,proto3" json:"backoff_endhost,omitempty"`                                                 // Should not be modified.
	RrVpSelectionAlgorithm       string                        `protobuf:"bytes,6,opt,name=rr_vp_selection_algorithm,json=rrVpSelectionAlgorithm,proto3" json:"rr_vp_selection_algorithm,omitempty"`                      // Should not be modified, uses the ingress technique described in the REVTR 2.0 paper.
	MaxSpoofers                  uint32                        `protobuf:"varint,7,opt,name=max_spoofers,json=maxSpoofers,proto3" json:"max_spoofers,omitempty"`                                                          // Should not be modified, uses the ingress technique described in the REVTR 2.0 paper.
	AtlasOptions                 *AtlasOptions                 `protobuf:"bytes,8,opt,name=atlas_options,json=atlasOptions,proto3" json:"atlas_options,omitempty"`                                                        // Should not be modified
	SymmetryOptions              *SymmetryOptions              `protobuf:"bytes,9,opt,name=symmetry_options,json=symmetryOptions,proto3" json:"symmetry_options,omitempty"`                                               // Symmetry options to allow (intradomain and interdomain). REVTR 2.0 allows intradomain by default.
	HeuristicsOptions            *RRHeuristicsOptions          `protobuf:"bytes,10,opt,name=heuristics_options,json=heuristicsOptions,proto3" json:"heuristics_options,omitempty"`                                        // Should not be modified
	CheckDestBasedRoutingOptions *CheckDestBasedRoutingOptions `protobuf:"bytes,11,opt,name=check_dest_based_routing_options,json=checkDestBasedRoutingOptions,proto3" json:"check_dest_based_routing_options,omitempty"` // Should not be modified
	Label                        string                        `protobuf:"bytes,12,opt,name=label,proto3" json:"label,omitempty"`                                                                                         // Label of the measurements, use this to retrieve your measurements on M-Lab archive easily.
	IsRunForwardTraceroute       bool                          `protobuf:"varint,13,opt,name=is_run_forward_traceroute,json=isRunForwardTraceroute,proto3" json:"is_run_forward_traceroute,omitempty"`                    // If you want to run a forward traceroute between the source and the destination after the reverse traceroute.
	IsRunRttPings                bool                          `protobuf:"varint,14,opt,name=is_run_rtt_pings,json=isRunRttPings,proto3" json:"is_run_rtt_pings,omitempty"`                                               // If you want to run ping measurements to each hop on the reverse path from the source.
	UseTimestamp                 bool                          `protobuf:"varint,15,opt,name=use_timestamp,json=useTimestamp,proto3" json:"use_timestamp,omitempty"`                                                      // Should not be modified
	UseCache                     bool                          `protobuf:"varint,16,opt,name=use_cache,json=useCache,proto3" json:"use_cache,omitempty"`                                                                  // Should not be modified, whether to use cached measurement or not (cached during staleness value (24 hours by default)).
	Uuid                         string                        `protobuf:"bytes,17,opt,name=uuid,proto3" json:"uuid,omitempty"`                                                                                           // Specific to M-Lab to map to big query.
}

func (x *RevtrMeasurement) Reset() {
	*x = RevtrMeasurement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevtrMeasurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevtrMeasurement) ProtoMessage() {}

func (x *RevtrMeasurement) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevtrMeasurement.ProtoReflect.Descriptor instead.
func (*RevtrMeasurement) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{0}
}

func (x *RevtrMeasurement) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *RevtrMeasurement) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *RevtrMeasurement) GetStaleness() uint32 {
	if x != nil {
		return x.Staleness
	}
	return 0
}

func (x *RevtrMeasurement) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RevtrMeasurement) GetBackoffEndhost() bool {
	if x != nil {
		return x.BackoffEndhost
	}
	return false
}

func (x *RevtrMeasurement) GetRrVpSelectionAlgorithm() string {
	if x != nil {
		return x.RrVpSelectionAlgorithm
	}
	return ""
}

func (x *RevtrMeasurement) GetMaxSpoofers() uint32 {
	if x != nil {
		return x.MaxSpoofers
	}
	return 0
}

func (x *RevtrMeasurement) GetAtlasOptions() *AtlasOptions {
	if x != nil {
		return x.AtlasOptions
	}
	return nil
}

func (x *RevtrMeasurement) GetSymmetryOptions() *SymmetryOptions {
	if x != nil {
		return x.SymmetryOptions
	}
	return nil
}

func (x *RevtrMeasurement) GetHeuristicsOptions() *RRHeuristicsOptions {
	if x != nil {
		return x.HeuristicsOptions
	}
	return nil
}

func (x *RevtrMeasurement) GetCheckDestBasedRoutingOptions() *CheckDestBasedRoutingOptions {
	if x != nil {
		return x.CheckDestBasedRoutingOptions
	}
	return nil
}

func (x *RevtrMeasurement) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *RevtrMeasurement) GetIsRunForwardTraceroute() bool {
	if x != nil {
		return x.IsRunForwardTraceroute
	}
	return false
}

func (x *RevtrMeasurement) GetIsRunRttPings() bool {
	if x != nil {
		return x.IsRunRttPings
	}
	return false
}

func (x *RevtrMeasurement) GetUseTimestamp() bool {
	if x != nil {
		return x.UseTimestamp
	}
	return false
}

func (x *RevtrMeasurement) GetUseCache() bool {
	if x != nil {
		return x.UseCache
	}
	return false
}

func (x *RevtrMeasurement) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type CheckDestBasedRoutingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckTunnel bool `protobuf:"varint,1,opt,name=check_tunnel,json=checkTunnel,proto3" json:"check_tunnel,omitempty"`
}

func (x *CheckDestBasedRoutingOptions) Reset() {
	*x = CheckDestBasedRoutingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDestBasedRoutingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDestBasedRoutingOptions) ProtoMessage() {}

func (x *CheckDestBasedRoutingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDestBasedRoutingOptions.ProtoReflect.Descriptor instead.
func (*CheckDestBasedRoutingOptions) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{1}
}

func (x *CheckDestBasedRoutingOptions) GetCheckTunnel() bool {
	if x != nil {
		return x.CheckTunnel
	}
	return false
}

type RRHeuristicsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseDoubleStamp bool `protobuf:"varint,1,opt,name=use_double_stamp,json=useDoubleStamp,proto3" json:"use_double_stamp,omitempty"`
}

func (x *RRHeuristicsOptions) Reset() {
	*x = RRHeuristicsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRHeuristicsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRHeuristicsOptions) ProtoMessage() {}

func (x *RRHeuristicsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRHeuristicsOptions.ProtoReflect.Descriptor instead.
func (*RRHeuristicsOptions) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{2}
}

func (x *RRHeuristicsOptions) GetUseDoubleStamp() bool {
	if x != nil {
		return x.UseDoubleStamp
	}
	return false
}

type AtlasOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseAtlas               bool     `protobuf:"varint,1,opt,name=use_atlas,json=useAtlas,proto3" json:"use_atlas,omitempty"`                                             // Whether to use traceroute atlas or not.
	UseRrPings             bool     `protobuf:"varint,2,opt,name=use_rr_pings,json=useRrPings,proto3" json:"use_rr_pings,omitempty"`                                     // Whether to use the REVTR 2.0 to increase intersections between traceroutes of the atlas and reverse traceroutes, or not.
	IgnoreSource           bool     `protobuf:"varint,3,opt,name=ignore_source,json=ignoreSource,proto3" json:"ignore_source,omitempty"`                                 // Internal, do not use
	IgnoreSourceAs         bool     `protobuf:"varint,4,opt,name=ignore_source_as,json=ignoreSourceAs,proto3" json:"ignore_source_as,omitempty"`                         // Internal, do not use
	Platforms              []string `protobuf:"bytes,5,rep,name=platforms,proto3" json:"platforms,omitempty"`                                                            // Platform to use for the traceroute atlas (default are RIPE Atlas and M-Lab)
	Staleness              int64    `protobuf:"varint,6,opt,name=staleness,proto3" json:"staleness,omitempty"`                                                           // // Should not be modified, uses the 24 hours threshold described in the REVTR 2.0 paper.
	StalenessBeforeRefresh int64    `protobuf:"varint,7,opt,name=staleness_before_refresh,json=stalenessBeforeRefresh,proto3" json:"staleness_before_refresh,omitempty"` // in minutes
}

func (x *AtlasOptions) Reset() {
	*x = AtlasOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtlasOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtlasOptions) ProtoMessage() {}

func (x *AtlasOptions) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtlasOptions.ProtoReflect.Descriptor instead.
func (*AtlasOptions) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{3}
}

func (x *AtlasOptions) GetUseAtlas() bool {
	if x != nil {
		return x.UseAtlas
	}
	return false
}

func (x *AtlasOptions) GetUseRrPings() bool {
	if x != nil {
		return x.UseRrPings
	}
	return false
}

func (x *AtlasOptions) GetIgnoreSource() bool {
	if x != nil {
		return x.IgnoreSource
	}
	return false
}

func (x *AtlasOptions) GetIgnoreSourceAs() bool {
	if x != nil {
		return x.IgnoreSourceAs
	}
	return false
}

func (x *AtlasOptions) GetPlatforms() []string {
	if x != nil {
		return x.Platforms
	}
	return nil
}

func (x *AtlasOptions) GetStaleness() int64 {
	if x != nil {
		return x.Staleness
	}
	return 0
}

func (x *AtlasOptions) GetStalenessBeforeRefresh() int64 {
	if x != nil {
		return x.StalenessBeforeRefresh
	}
	return 0
}

type SymmetryOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAllowInterdomainSymmetry bool `protobuf:"varint,1,opt,name=is_allow_interdomain_symmetry,json=isAllowInterdomainSymmetry,proto3" json:"is_allow_interdomain_symmetry,omitempty"` // Whether to allow interdomain symmetry assumptions or not, can affect accuracy.
}

func (x *SymmetryOptions) Reset() {
	*x = SymmetryOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetryOptions) ProtoMessage() {}

func (x *SymmetryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetryOptions.ProtoReflect.Descriptor instead.
func (*SymmetryOptions) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{4}
}

func (x *SymmetryOptions) GetIsAllowInterdomainSymmetry() bool {
	if x != nil {
		return x.IsAllowInterdomainSymmetry
	}
	return false
}

type RunRevtrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revtrs  []*RevtrMeasurement `protobuf:"bytes,1,rep,name=revtrs,proto3" json:"revtrs,omitempty"`    // The reverse traceroute measurements
	Auth    string              `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`        // Your API key.
	CheckDB bool                `protobuf:"varint,3,opt,name=checkDB,proto3" json:"checkDB,omitempty"` // // Should not be used
}

func (x *RunRevtrReq) Reset() {
	*x = RunRevtrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRevtrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRevtrReq) ProtoMessage() {}

func (x *RunRevtrReq) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRevtrReq.ProtoReflect.Descriptor instead.
func (*RunRevtrReq) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{5}
}

func (x *RunRevtrReq) GetRevtrs() []*RevtrMeasurement {
	if x != nil {
		return x.Revtrs
	}
	return nil
}

func (x *RunRevtrReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *RunRevtrReq) GetCheckDB() bool {
	if x != nil {
		return x.CheckDB
	}
	return false
}

type RunRevtrResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId uint32 `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
}

func (x *RunRevtrResp) Reset() {
	*x = RunRevtrResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRevtrResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRevtrResp) ProtoMessage() {}

func (x *RunRevtrResp) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRevtrResp.ProtoReflect.Descriptor instead.
func (*RunRevtrResp) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{6}
}

func (x *RunRevtrResp) GetBatchId() uint32 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

type GetRevtrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId uint32 `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Auth    string `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetRevtrReq) Reset() {
	*x = GetRevtrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevtrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevtrReq) ProtoMessage() {}

func (x *GetRevtrReq) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevtrReq.ProtoReflect.Descriptor instead.
func (*GetRevtrReq) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{7}
}

func (x *GetRevtrReq) GetBatchId() uint32 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *GetRevtrReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

type GetRevtrByLabelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Auth  string `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetRevtrByLabelReq) Reset() {
	*x = GetRevtrByLabelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevtrByLabelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevtrByLabelReq) ProtoMessage() {}

func (x *GetRevtrByLabelReq) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevtrByLabelReq.ProtoReflect.Descriptor instead.
func (*GetRevtrByLabelReq) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{8}
}

func (x *GetRevtrByLabelReq) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *GetRevtrByLabelReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

type GetRevtrByLabelResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revtrs []*ReverseTraceroute `protobuf:"bytes,1,rep,name=revtrs,proto3" json:"revtrs,omitempty"`
}

func (x *GetRevtrByLabelResp) Reset() {
	*x = GetRevtrByLabelResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevtrByLabelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevtrByLabelResp) ProtoMessage() {}

func (x *GetRevtrByLabelResp) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevtrByLabelResp.ProtoReflect.Descriptor instead.
func (*GetRevtrByLabelResp) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{9}
}

func (x *GetRevtrByLabelResp) GetRevtrs() []*ReverseTraceroute {
	if x != nil {
		return x.Revtrs
	}
	return nil
}

type GetRevtrMetaOnlyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId uint32 `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Auth    string `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetRevtrMetaOnlyReq) Reset() {
	*x = GetRevtrMetaOnlyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevtrMetaOnlyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevtrMetaOnlyReq) ProtoMessage() {}

func (x *GetRevtrMetaOnlyReq) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevtrMetaOnlyReq.ProtoReflect.Descriptor instead.
func (*GetRevtrMetaOnlyReq) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{10}
}

func (x *GetRevtrMetaOnlyReq) GetBatchId() uint32 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *GetRevtrMetaOnlyReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

type GetRevtrMetaOnlyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevtrsMeta []*ReverseTracerouteMetaOnly `protobuf:"bytes,1,rep,name=revtrs_meta,json=revtrsMeta,proto3" json:"revtrs_meta,omitempty"`
}

func (x *GetRevtrMetaOnlyResp) Reset() {
	*x = GetRevtrMetaOnlyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevtrMetaOnlyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevtrMetaOnlyResp) ProtoMessage() {}

func (x *GetRevtrMetaOnlyResp) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevtrMetaOnlyResp.ProtoReflect.Descriptor instead.
func (*GetRevtrMetaOnlyResp) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{11}
}

func (x *GetRevtrMetaOnlyResp) GetRevtrsMeta() []*ReverseTracerouteMetaOnly {
	if x != nil {
		return x.RevtrsMeta
	}
	return nil
}

type GetRevtrResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revtrs []*ReverseTraceroute `protobuf:"bytes,1,rep,name=revtrs,proto3" json:"revtrs,omitempty"`
}

func (x *GetRevtrResp) Reset() {
	*x = GetRevtrResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevtrResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevtrResp) ProtoMessage() {}

func (x *GetRevtrResp) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevtrResp.ProtoReflect.Descriptor instead.
func (*GetRevtrResp) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{12}
}

func (x *GetRevtrResp) GetRevtrs() []*ReverseTraceroute {
	if x != nil {
		return x.Revtrs
	}
	return nil
}

type GetRevtrBatchStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId uint32 `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Auth    string `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetRevtrBatchStatusReq) Reset() {
	*x = GetRevtrBatchStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevtrBatchStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevtrBatchStatusReq) ProtoMessage() {}

func (x *GetRevtrBatchStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevtrBatchStatusReq.ProtoReflect.Descriptor instead.
func (*GetRevtrBatchStatusReq) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{13}
}

func (x *GetRevtrBatchStatusReq) GetBatchId() uint32 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *GetRevtrBatchStatusReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

type GetRevtrBatchStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevtrsStatus []RevtrStatus `protobuf:"varint,1,rep,packed,name=revtrs_status,json=revtrsStatus,proto3,enum=pb.RevtrStatus" json:"revtrs_status,omitempty"`
}

func (x *GetRevtrBatchStatusResp) Reset() {
	*x = GetRevtrBatchStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevtrBatchStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevtrBatchStatusResp) ProtoMessage() {}

func (x *GetRevtrBatchStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevtrBatchStatusResp.ProtoReflect.Descriptor instead.
func (*GetRevtrBatchStatusResp) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{14}
}

func (x *GetRevtrBatchStatusResp) GetRevtrsStatus() []RevtrStatus {
	if x != nil {
		return x.RevtrsStatus
	}
	return nil
}

type UpdateRevtrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth         string `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	RevtrId      uint32 `protobuf:"varint,2,opt,name=revtr_id,json=revtrId,proto3" json:"revtr_id,omitempty"`
	TracerouteId int64  `protobuf:"varint,3,opt,name=traceroute_id,json=tracerouteId,proto3" json:"traceroute_id,omitempty"`
}

func (x *UpdateRevtrReq) Reset() {
	*x = UpdateRevtrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRevtrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRevtrReq) ProtoMessage() {}

func (x *UpdateRevtrReq) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRevtrReq.ProtoReflect.Descriptor instead.
func (*UpdateRevtrReq) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateRevtrReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *UpdateRevtrReq) GetRevtrId() uint32 {
	if x != nil {
		return x.RevtrId
	}
	return 0
}

func (x *UpdateRevtrReq) GetTracerouteId() int64 {
	if x != nil {
		return x.TracerouteId
	}
	return 0
}

type UpdateRevtrResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRevtrResp) Reset() {
	*x = UpdateRevtrResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRevtrResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRevtrResp) ProtoMessage() {}

func (x *UpdateRevtrResp) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRevtrResp.ProtoReflect.Descriptor instead.
func (*UpdateRevtrResp) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{16}
}

type GetSourcesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth          string `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	OnlyWithAtlas bool   `protobuf:"varint,2,opt,name=only_with_atlas,json=onlyWithAtlas,proto3" json:"only_with_atlas,omitempty"`
}

func (x *GetSourcesReq) Reset() {
	*x = GetSourcesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSourcesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourcesReq) ProtoMessage() {}

func (x *GetSourcesReq) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourcesReq.ProtoReflect.Descriptor instead.
func (*GetSourcesReq) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{17}
}

func (x *GetSourcesReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *GetSourcesReq) GetOnlyWithAtlas() bool {
	if x != nil {
		return x.OnlyWithAtlas
	}
	return false
}

type GetSourcesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Srcs []*Source `protobuf:"bytes,1,rep,name=srcs,proto3" json:"srcs,omitempty"`
}

func (x *GetSourcesResp) Reset() {
	*x = GetSourcesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSourcesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourcesResp) ProtoMessage() {}

func (x *GetSourcesResp) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourcesResp.ProtoReflect.Descriptor instead.
func (*GetSourcesResp) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{18}
}

func (x *GetSourcesResp) GetSrcs() []*Source {
	if x != nil {
		return x.Srcs
	}
	return nil
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ip       string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Site     string `protobuf:"bytes,3,opt,name=site,proto3" json:"site,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{19}
}

func (x *Source) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Source) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Source) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

type ReverseTracerouteMetaOnly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RevtrStatus `protobuf:"varint,1,opt,name=status,proto3,enum=pb.RevtrStatus" json:"status,omitempty"`
	Src    string      `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	Dst    string      `protobuf:"bytes,3,opt,name=dst,proto3" json:"dst,omitempty"`
	Id     uint32      `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReverseTracerouteMetaOnly) Reset() {
	*x = ReverseTracerouteMetaOnly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseTracerouteMetaOnly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseTracerouteMetaOnly) ProtoMessage() {}

func (x *ReverseTracerouteMetaOnly) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseTracerouteMetaOnly.ProtoReflect.Descriptor instead.
func (*ReverseTracerouteMetaOnly) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{20}
}

func (x *ReverseTracerouteMetaOnly) GetStatus() RevtrStatus {
	if x != nil {
		return x.Status
	}
	return RevtrStatus_DUMMY_X
}

func (x *ReverseTracerouteMetaOnly) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *ReverseTracerouteMetaOnly) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *ReverseTracerouteMetaOnly) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ReverseTraceroute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status              RevtrStatus                `protobuf:"varint,1,opt,name=status,proto3,enum=pb.RevtrStatus" json:"status,omitempty"`
	Src                 string                     `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	Dst                 string                     `protobuf:"bytes,3,opt,name=dst,proto3" json:"dst,omitempty"`
	Runtime             int64                      `protobuf:"varint,4,opt,name=runtime,proto3" json:"runtime,omitempty"`
	StopReason          string                     `protobuf:"bytes,5,opt,name=stop_reason,json=stopReason,proto3" json:"stop_reason,omitempty"`
	Date                string                     `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
	Path                []*RevtrHop                `protobuf:"bytes,7,rep,name=path,proto3" json:"path,omitempty"`
	Id                  uint32                     `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	FailReason          string                     `protobuf:"bytes,9,opt,name=fail_reason,json=failReason,proto3" json:"fail_reason,omitempty"`
	Stats               *Stats                     `protobuf:"bytes,10,opt,name=stats,proto3" json:"stats,omitempty"`
	RankedSpoofersByHop map[uint32]*RankedSpoofers `protobuf:"bytes,11,rep,name=ranked_spoofers_by_hop,json=rankedSpoofersByHop,proto3" json:"ranked_spoofers_by_hop,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Label               string                     `protobuf:"bytes,12,opt,name=label,proto3" json:"label,omitempty"`
	StartTime           int64                      `protobuf:"varint,13,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime             int64                      `protobuf:"varint,14,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	ForwardTracerouteId int64                      `protobuf:"varint,15,opt,name=forward_traceroute_id,json=forwardTracerouteId,proto3" json:"forward_traceroute_id,omitempty"`
	Uuid                string                     `protobuf:"bytes,16,opt,name=uuid,proto3" json:"uuid,omitempty"` // Specific to M-Lab to map to big query.
}

func (x *ReverseTraceroute) Reset() {
	*x = ReverseTraceroute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseTraceroute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseTraceroute) ProtoMessage() {}

func (x *ReverseTraceroute) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseTraceroute.ProtoReflect.Descriptor instead.
func (*ReverseTraceroute) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{21}
}

func (x *ReverseTraceroute) GetStatus() RevtrStatus {
	if x != nil {
		return x.Status
	}
	return RevtrStatus_DUMMY_X
}

func (x *ReverseTraceroute) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *ReverseTraceroute) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *ReverseTraceroute) GetRuntime() int64 {
	if x != nil {
		return x.Runtime
	}
	return 0
}

func (x *ReverseTraceroute) GetStopReason() string {
	if x != nil {
		return x.StopReason
	}
	return ""
}

func (x *ReverseTraceroute) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ReverseTraceroute) GetPath() []*RevtrHop {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ReverseTraceroute) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReverseTraceroute) GetFailReason() string {
	if x != nil {
		return x.FailReason
	}
	return ""
}

func (x *ReverseTraceroute) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ReverseTraceroute) GetRankedSpoofersByHop() map[uint32]*RankedSpoofers {
	if x != nil {
		return x.RankedSpoofersByHop
	}
	return nil
}

func (x *ReverseTraceroute) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ReverseTraceroute) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ReverseTraceroute) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ReverseTraceroute) GetForwardTracerouteId() int64 {
	if x != nil {
		return x.ForwardTracerouteId
	}
	return 0
}

func (x *ReverseTraceroute) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsDuration                    *durationpb.Duration `protobuf:"bytes,1,opt,name=ts_duration,json=tsDuration,proto3" json:"ts_duration,omitempty"`
	RrDuration                    *durationpb.Duration `protobuf:"bytes,2,opt,name=rr_duration,json=rrDuration,proto3" json:"rr_duration,omitempty"`
	TrToSrcDuration               *durationpb.Duration `protobuf:"bytes,3,opt,name=tr_to_src_duration,json=trToSrcDuration,proto3" json:"tr_to_src_duration,omitempty"`
	AssumeSymmetricDuration       *durationpb.Duration `protobuf:"bytes,4,opt,name=assume_symmetric_duration,json=assumeSymmetricDuration,proto3" json:"assume_symmetric_duration,omitempty"`
	BackgroundTrsDuration         *durationpb.Duration `protobuf:"bytes,5,opt,name=background_trs_duration,json=backgroundTrsDuration,proto3" json:"background_trs_duration,omitempty"`
	DestBasedCheckDuration        *durationpb.Duration `protobuf:"bytes,6,opt,name=dest_based_check_duration,json=destBasedCheckDuration,proto3" json:"dest_based_check_duration,omitempty"`
	RrProbes                      int32                `protobuf:"varint,7,opt,name=rr_probes,json=rrProbes,proto3" json:"rr_probes,omitempty"`
	SpoofedRrProbes               int32                `protobuf:"varint,8,opt,name=spoofed_rr_probes,json=spoofedRrProbes,proto3" json:"spoofed_rr_probes,omitempty"`
	DestBasedCheckRrProbes        int32                `protobuf:"varint,9,opt,name=dest_based_check_rr_probes,json=destBasedCheckRrProbes,proto3" json:"dest_based_check_rr_probes,omitempty"`
	DestBasedCheckSpoofedRrProbes int32                `protobuf:"varint,10,opt,name=dest_based_check_spoofed_rr_probes,json=destBasedCheckSpoofedRrProbes,proto3" json:"dest_based_check_spoofed_rr_probes,omitempty"`
	TsProbes                      int32                `protobuf:"varint,11,opt,name=ts_probes,json=tsProbes,proto3" json:"ts_probes,omitempty"`
	SpoofedTsProbes               int32                `protobuf:"varint,12,opt,name=spoofed_ts_probes,json=spoofedTsProbes,proto3" json:"spoofed_ts_probes,omitempty"`
	RrRoundCount                  int32                `protobuf:"varint,13,opt,name=rr_round_count,json=rrRoundCount,proto3" json:"rr_round_count,omitempty"`
	TsRoundCount                  int32                `protobuf:"varint,14,opt,name=ts_round_count,json=tsRoundCount,proto3" json:"ts_round_count,omitempty"`
	TrToSrcRoundCount             int32                `protobuf:"varint,15,opt,name=tr_to_src_round_count,json=trToSrcRoundCount,proto3" json:"tr_to_src_round_count,omitempty"`
	AssumeSymmetricRoundCount     int32                `protobuf:"varint,16,opt,name=assume_symmetric_round_count,json=assumeSymmetricRoundCount,proto3" json:"assume_symmetric_round_count,omitempty"`
	BackgroundTrsRoundCount       int32                `protobuf:"varint,17,opt,name=background_trs_round_count,json=backgroundTrsRoundCount,proto3" json:"background_trs_round_count,omitempty"`
	DestBasedCheckRoundCount      int32                `protobuf:"varint,18,opt,name=dest_based_check_round_count,json=destBasedCheckRoundCount,proto3" json:"dest_based_check_round_count,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{22}
}

func (x *Stats) GetTsDuration() *durationpb.Duration {
	if x != nil {
		return x.TsDuration
	}
	return nil
}

func (x *Stats) GetRrDuration() *durationpb.Duration {
	if x != nil {
		return x.RrDuration
	}
	return nil
}

func (x *Stats) GetTrToSrcDuration() *durationpb.Duration {
	if x != nil {
		return x.TrToSrcDuration
	}
	return nil
}

func (x *Stats) GetAssumeSymmetricDuration() *durationpb.Duration {
	if x != nil {
		return x.AssumeSymmetricDuration
	}
	return nil
}

func (x *Stats) GetBackgroundTrsDuration() *durationpb.Duration {
	if x != nil {
		return x.BackgroundTrsDuration
	}
	return nil
}

func (x *Stats) GetDestBasedCheckDuration() *durationpb.Duration {
	if x != nil {
		return x.DestBasedCheckDuration
	}
	return nil
}

func (x *Stats) GetRrProbes() int32 {
	if x != nil {
		return x.RrProbes
	}
	return 0
}

func (x *Stats) GetSpoofedRrProbes() int32 {
	if x != nil {
		return x.SpoofedRrProbes
	}
	return 0
}

func (x *Stats) GetDestBasedCheckRrProbes() int32 {
	if x != nil {
		return x.DestBasedCheckRrProbes
	}
	return 0
}

func (x *Stats) GetDestBasedCheckSpoofedRrProbes() int32 {
	if x != nil {
		return x.DestBasedCheckSpoofedRrProbes
	}
	return 0
}

func (x *Stats) GetTsProbes() int32 {
	if x != nil {
		return x.TsProbes
	}
	return 0
}

func (x *Stats) GetSpoofedTsProbes() int32 {
	if x != nil {
		return x.SpoofedTsProbes
	}
	return 0
}

func (x *Stats) GetRrRoundCount() int32 {
	if x != nil {
		return x.RrRoundCount
	}
	return 0
}

func (x *Stats) GetTsRoundCount() int32 {
	if x != nil {
		return x.TsRoundCount
	}
	return 0
}

func (x *Stats) GetTrToSrcRoundCount() int32 {
	if x != nil {
		return x.TrToSrcRoundCount
	}
	return 0
}

func (x *Stats) GetAssumeSymmetricRoundCount() int32 {
	if x != nil {
		return x.AssumeSymmetricRoundCount
	}
	return 0
}

func (x *Stats) GetBackgroundTrsRoundCount() int32 {
	if x != nil {
		return x.BackgroundTrsRoundCount
	}
	return 0
}

func (x *Stats) GetDestBasedCheckRoundCount() int32 {
	if x != nil {
		return x.DestBasedCheckRoundCount
	}
	return 0
}

type RankedSpoofers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankedSpoofers []*RankedSpoofer `protobuf:"bytes,1,rep,name=ranked_spoofers,json=rankedSpoofers,proto3" json:"ranked_spoofers,omitempty"`
}

func (x *RankedSpoofers) Reset() {
	*x = RankedSpoofers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankedSpoofers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankedSpoofers) ProtoMessage() {}

func (x *RankedSpoofers) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankedSpoofers.ProtoReflect.Descriptor instead.
func (*RankedSpoofers) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{23}
}

func (x *RankedSpoofers) GetRankedSpoofers() []*RankedSpoofer {
	if x != nil {
		return x.RankedSpoofers
	}
	return nil
}

type RankedSpoofer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank             uint32 `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Ip               uint32 `protobuf:"varint,2,opt,name=ip,proto3" json:"ip,omitempty"`
	MeasurementId    int64  `protobuf:"varint,3,opt,name=measurement_id,json=measurementId,proto3" json:"measurement_id,omitempty"`
	RankingTechnique string `protobuf:"bytes,4,opt,name=ranking_technique,json=rankingTechnique,proto3" json:"ranking_technique,omitempty"`
}

func (x *RankedSpoofer) Reset() {
	*x = RankedSpoofer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankedSpoofer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankedSpoofer) ProtoMessage() {}

func (x *RankedSpoofer) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankedSpoofer.ProtoReflect.Descriptor instead.
func (*RankedSpoofer) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{24}
}

func (x *RankedSpoofer) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RankedSpoofer) GetIp() uint32 {
	if x != nil {
		return x.Ip
	}
	return 0
}

func (x *RankedSpoofer) GetMeasurementId() int64 {
	if x != nil {
		return x.MeasurementId
	}
	return 0
}

func (x *RankedSpoofer) GetRankingTechnique() string {
	if x != nil {
		return x.RankingTechnique
	}
	return ""
}

type RevtrHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hop                  string                      `protobuf:"bytes,1,opt,name=hop,proto3" json:"hop,omitempty"`
	Type                 RevtrHopType                `protobuf:"varint,2,opt,name=type,proto3,enum=pb.RevtrHopType" json:"type,omitempty"`
	DestBasedRoutingType DestinationBasedRoutingType `protobuf:"varint,3,opt,name=dest_based_routing_type,json=destBasedRoutingType,proto3,enum=pb.DestinationBasedRoutingType" json:"dest_based_routing_type,omitempty"`
	MeasurementId        int64                       `protobuf:"varint,4,opt,name=measurement_id,json=measurementId,proto3" json:"measurement_id,omitempty"`
	FromCache            bool                        `protobuf:"varint,5,opt,name=fromCache,proto3" json:"fromCache,omitempty"`
	Rtt                  uint32                      `protobuf:"varint,6,opt,name=rtt,proto3" json:"rtt,omitempty"`
	RttMeasurementId     int64                       `protobuf:"varint,7,opt,name=rtt_measurement_id,json=rttMeasurementId,proto3" json:"rtt_measurement_id,omitempty"`
}

func (x *RevtrHop) Reset() {
	*x = RevtrHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevtrHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevtrHop) ProtoMessage() {}

func (x *RevtrHop) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevtrHop.ProtoReflect.Descriptor instead.
func (*RevtrHop) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{25}
}

func (x *RevtrHop) GetHop() string {
	if x != nil {
		return x.Hop
	}
	return ""
}

func (x *RevtrHop) GetType() RevtrHopType {
	if x != nil {
		return x.Type
	}
	return RevtrHopType_DUMMY
}

func (x *RevtrHop) GetDestBasedRoutingType() DestinationBasedRoutingType {
	if x != nil {
		return x.DestBasedRoutingType
	}
	return DestinationBasedRoutingType_NO_CHECK
}

func (x *RevtrHop) GetMeasurementId() int64 {
	if x != nil {
		return x.MeasurementId
	}
	return 0
}

func (x *RevtrHop) GetFromCache() bool {
	if x != nil {
		return x.FromCache
	}
	return false
}

func (x *RevtrHop) GetRtt() uint32 {
	if x != nil {
		return x.Rtt
	}
	return 0
}

func (x *RevtrHop) GetRttMeasurementId() int64 {
	if x != nil {
		return x.RttMeasurementId
	}
	return 0
}

type RevtrUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email            string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Max              uint32 `protobuf:"varint,4,opt,name=max,proto3" json:"max,omitempty"`
	Delay            uint32 `protobuf:"varint,5,opt,name=delay,proto3" json:"delay,omitempty"`
	Key              string `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	MaxRevtrPerDay   uint32 `protobuf:"varint,7,opt,name=max_revtr_per_day,json=maxRevtrPerDay,proto3" json:"max_revtr_per_day,omitempty"`
	RevtrRunToday    uint32 `protobuf:"varint,8,opt,name=revtr_run_today,json=revtrRunToday,proto3" json:"revtr_run_today,omitempty"`
	MaxParallelRevtr uint32 `protobuf:"varint,9,opt,name=max_parallel_revtr,json=maxParallelRevtr,proto3" json:"max_parallel_revtr,omitempty"`
}

func (x *RevtrUser) Reset() {
	*x = RevtrUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevtrUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevtrUser) ProtoMessage() {}

func (x *RevtrUser) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevtrUser.ProtoReflect.Descriptor instead.
func (*RevtrUser) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{26}
}

func (x *RevtrUser) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RevtrUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RevtrUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RevtrUser) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *RevtrUser) GetDelay() uint32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *RevtrUser) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RevtrUser) GetMaxRevtrPerDay() uint32 {
	if x != nil {
		return x.MaxRevtrPerDay
	}
	return 0
}

func (x *RevtrUser) GetRevtrRunToday() uint32 {
	if x != nil {
		return x.RevtrRunToday
	}
	return 0
}

func (x *RevtrUser) GetMaxParallelRevtr() uint32 {
	if x != nil {
		return x.MaxParallelRevtr
	}
	return 0
}

type CleanAtlasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Auth   string `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *CleanAtlasReq) Reset() {
	*x = CleanAtlasReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanAtlasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanAtlasReq) ProtoMessage() {}

func (x *CleanAtlasReq) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanAtlasReq.ProtoReflect.Descriptor instead.
func (*CleanAtlasReq) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{27}
}

func (x *CleanAtlasReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CleanAtlasReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

type CleanAtlasResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CleanAtlasResp) Reset() {
	*x = CleanAtlasResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanAtlasResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanAtlasResp) ProtoMessage() {}

func (x *CleanAtlasResp) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanAtlasResp.ProtoReflect.Descriptor instead.
func (*CleanAtlasResp) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{28}
}

type RunAtlasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Auth   string `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *RunAtlasReq) Reset() {
	*x = RunAtlasReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunAtlasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunAtlasReq) ProtoMessage() {}

func (x *RunAtlasReq) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunAtlasReq.ProtoReflect.Descriptor instead.
func (*RunAtlasReq) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{29}
}

func (x *RunAtlasReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *RunAtlasReq) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

type RunAtlasResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunAtlasResp) Reset() {
	*x = RunAtlasResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_revtr_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunAtlasResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunAtlasResp) ProtoMessage() {}

func (x *RunAtlasResp) ProtoReflect() protoreflect.Message {
	mi := &file_revtr_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunAtlasResp.ProtoReflect.Descriptor instead.
func (*RunAtlasResp) Descriptor() ([]byte, []int) {
	return file_revtr_proto_rawDescGZIP(), []int{30}
}

var File_revtr_proto protoreflect.FileDescriptor

var file_revtr_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x72, 0x65, 0x76, 0x74, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70,
	0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe4, 0x05, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x74, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6c,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x5f, 0x65, 0x6e, 0x64, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x45, 0x6e, 0x64, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x19, 0x72, 0x72, 0x5f, 0x76, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x72, 0x72, 0x56, 0x70, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x70, 0x6f, 0x6f, 0x66, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x6f, 0x6f, 0x66, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a,
	0x0d, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x68, 0x65, 0x75, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x52, 0x48, 0x65, 0x75, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x11, 0x68, 0x65, 0x75, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x68, 0x0a, 0x20,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x44, 0x65, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x44,
	0x65, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x19,
	0x69, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x72, 0x74, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x52, 0x74, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44,
	0x65, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x3f, 0x0a, 0x13, 0x52, 0x52, 0x48,
	0x65, 0x75, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x92, 0x02, 0x0a, 0x0c, 0x41,
	0x74, 0x6c, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x5f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f,
	0x72, 0x72, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x52, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6c,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x22,
	0x54, 0x0a, 0x0f, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x22, 0x69, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x76, 0x74,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x74, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x76, 0x74, 0x72, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x76, 0x74,
	0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x44,
	0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x42,
	0x22, 0x29, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x76, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x76, 0x74, 0x72, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x3e, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x76, 0x74, 0x72, 0x42, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x44, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x76, 0x74, 0x72, 0x42, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x74, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x65, 0x76, 0x74, 0x72, 0x73, 0x22,
	0x44, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x74, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4f,
	0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x56, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x74,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a,
	0x0b, 0x72, 0x65, 0x76, 0x74, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x74, 0x72, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x3d, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a,
	0x06, 0x72, 0x65, 0x76, 0x74, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x65, 0x76, 0x74, 0x72, 0x73, 0x22, 0x47, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x74, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x4f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x74,
	0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x34, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x74, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x76,
	0x74, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x74, 0x72, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x64, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x76, 0x74, 0x72, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x74, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x72, 0x65, 0x76, 0x74, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x4b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f,
	0x6e, 0x6c, 0x79, 0x57, 0x69, 0x74, 0x68, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x22, 0x30, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e,
	0x0a, 0x04, 0x73, 0x72, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04, 0x73, 0x72, 0x63, 0x73, 0x22, 0x48,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x22, 0x78, 0x0a, 0x19, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x76, 0x74, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xfc, 0x04, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x76, 0x74, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x76, 0x74, 0x72, 0x48, 0x6f, 0x70,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x16, 0x72, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x5f, 0x73, 0x70, 0x6f, 0x6f, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x68,
	0x6f, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x70, 0x6f, 0x6f, 0x66, 0x65, 0x72, 0x73, 0x42, 0x79,
	0x48, 0x6f, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64,
	0x53, 0x70, 0x6f, 0x6f, 0x66, 0x65, 0x72, 0x73, 0x42, 0x79, 0x48, 0x6f, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x1a, 0x5a, 0x0a, 0x18, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x53,
	0x70, 0x6f, 0x6f, 0x66, 0x65, 0x72, 0x73, 0x42, 0x79, 0x48, 0x6f, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x70,
	0x6f, 0x6f, 0x66, 0x65, 0x72, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x9c, 0x08, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x74,
	0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x73, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x72, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x12, 0x74, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x72, 0x63,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x72, 0x54, 0x6f,
	0x53, 0x72, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x19, 0x61,
	0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x61, 0x73, 0x73, 0x75, 0x6d,
	0x65, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x74, 0x72, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x73, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x16, 0x64, 0x65, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x64, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x72, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x6f, 0x6f,
	0x66, 0x65, 0x64, 0x5f, 0x72, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x70, 0x6f, 0x6f, 0x66, 0x65, 0x64, 0x52, 0x72, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x64, 0x65, 0x73, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73,
	0x12, 0x49, 0x0a, 0x22, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x70, 0x6f, 0x6f, 0x66, 0x65, 0x64, 0x5f, 0x72, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x64, 0x65,
	0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70, 0x6f, 0x6f,
	0x66, 0x65, 0x64, 0x52, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x74, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x6f, 0x6f,
	0x66, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x70, 0x6f, 0x6f, 0x66, 0x65, 0x64, 0x54, 0x73, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x72,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x73,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x15, 0x74, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x74, 0x72, 0x54, 0x6f, 0x53, 0x72, 0x63, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65,
	0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x72, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x54, 0x72, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3e, 0x0a, 0x1c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x64, 0x65, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x4c, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x70, 0x6f, 0x6f, 0x66, 0x65,
	0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x6f,
	0x6f, 0x66, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x70, 0x6f, 0x6f, 0x66, 0x65, 0x72, 0x52, 0x0e,
	0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x70, 0x6f, 0x6f, 0x66, 0x65, 0x72, 0x73, 0x22, 0x87,
	0x01, 0x0a, 0x0d, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x70, 0x6f, 0x6f, 0x66, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x22, 0x9f, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x76,
	0x74, 0x72, 0x48, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x68, 0x6f, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x76, 0x74, 0x72,
	0x48, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a,
	0x17, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x14, 0x64, 0x65, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x74,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x74, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x74, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x74, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x09, 0x52,
	0x65, 0x76, 0x74, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x11,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x76, 0x74, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x76, 0x74,
	0x72, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x74, 0x72,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x72, 0x65, 0x76, 0x74, 0x72, 0x52, 0x75, 0x6e, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f,
	0x72, 0x65, 0x76, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78,
	0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x52, 0x65, 0x76, 0x74, 0x72, 0x22, 0x3b, 0x0a,
	0x0d, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x10, 0x0a, 0x0e, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x39, 0x0a, 0x0b,
	0x52, 0x75, 0x6e, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x0e, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x41, 0x74,
	0x6c, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2a, 0xc2, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x74,
	0x72, 0x48, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x55, 0x4d, 0x4d,
	0x59, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x5f, 0x53,
	0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x53, 0x54, 0x5f,
	0x53, 0x59, 0x4d, 0x5f, 0x52, 0x45, 0x56, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x52,
	0x45, 0x56, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d,
	0x54, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x52, 0x45, 0x56, 0x5f, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x52, 0x5f, 0x52, 0x45, 0x56, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x50, 0x4f, 0x4f, 0x46, 0x5f, 0x52, 0x52, 0x5f,
	0x52, 0x45, 0x56, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x16, 0x0a,
	0x12, 0x54, 0x53, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x56, 0x5f, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x50, 0x4f, 0x4f, 0x46, 0x5f, 0x54,
	0x53, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x56, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x50, 0x4f, 0x4f, 0x46, 0x5f, 0x54, 0x53, 0x5f,
	0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x56, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x53, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x09, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x50, 0x4f,
	0x4f, 0x46, 0x5f, 0x54, 0x53, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x56, 0x5f, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x53, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x4f,
	0x55, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x0a, 0x2a, 0x5d, 0x0a, 0x1b,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x64,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x4f, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f,
	0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0x44, 0x0a, 0x0b, 0x52,
	0x65, 0x76, 0x74, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x55,
	0x4d, 0x4d, 0x59, 0x5f, 0x58, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x32, 0x95, 0x06, 0x0a, 0x05, 0x52, 0x65, 0x76, 0x74, 0x72, 0x12, 0x47, 0x0a, 0x08, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x76, 0x74, 0x72, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x76, 0x74, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x76, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x12, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x76, 0x74,
	0x72, 0x3a, 0x01, 0x2a, 0x12, 0x4f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x74, 0x72,
	0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x74, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x74, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x76, 0x74, 0x72, 0x2f, 0x7b, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x61, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x74,
	0x72, 0x42, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x76, 0x74, 0x72, 0x42, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x74, 0x72, 0x42, 0x79,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x12, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x76, 0x74, 0x72,
	0x2f, 0x7b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x7d, 0x12, 0x6c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x76, 0x74, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x17, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x74, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4f, 0x6e,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x76, 0x74, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32,
	0x2f, 0x72, 0x65, 0x76, 0x74, 0x72, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x77, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76,
	0x74, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x74, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x76, 0x74, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x76, 0x74, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2f, 0x7b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0x38, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x74, 0x72, 0x12, 0x12,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x74, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x76, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0a, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x41, 0x74, 0x6c, 0x61, 0x73, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x41, 0x74, 0x6c, 0x61, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x4b, 0x0a, 0x08,
	0x52, 0x75, 0x6e, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x75,
	0x6e, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x75, 0x6e, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x3a, 0x01, 0x2a, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_revtr_proto_rawDescOnce sync.Once
	file_revtr_proto_rawDescData = file_revtr_proto_rawDesc
)

func file_revtr_proto_rawDescGZIP() []byte {
	file_revtr_proto_rawDescOnce.Do(func() {
		file_revtr_proto_rawDescData = protoimpl.X.CompressGZIP(file_revtr_proto_rawDescData)
	})
	return file_revtr_proto_rawDescData
}

var file_revtr_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_revtr_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_revtr_proto_goTypes = []interface{}{
	(RevtrHopType)(0),                    // 0: pb.RevtrHopType
	(DestinationBasedRoutingType)(0),     // 1: pb.DestinationBasedRoutingType
	(RevtrStatus)(0),                     // 2: pb.RevtrStatus
	(*RevtrMeasurement)(nil),             // 3: pb.RevtrMeasurement
	(*CheckDestBasedRoutingOptions)(nil), // 4: pb.CheckDestBasedRoutingOptions
	(*RRHeuristicsOptions)(nil),          // 5: pb.RRHeuristicsOptions
	(*AtlasOptions)(nil),                 // 6: pb.AtlasOptions
	(*SymmetryOptions)(nil),              // 7: pb.SymmetryOptions
	(*RunRevtrReq)(nil),                  // 8: pb.RunRevtrReq
	(*RunRevtrResp)(nil),                 // 9: pb.RunRevtrResp
	(*GetRevtrReq)(nil),                  // 10: pb.GetRevtrReq
	(*GetRevtrByLabelReq)(nil),           // 11: pb.GetRevtrByLabelReq
	(*GetRevtrByLabelResp)(nil),          // 12: pb.GetRevtrByLabelResp
	(*GetRevtrMetaOnlyReq)(nil),          // 13: pb.GetRevtrMetaOnlyReq
	(*GetRevtrMetaOnlyResp)(nil),         // 14: pb.GetRevtrMetaOnlyResp
	(*GetRevtrResp)(nil),                 // 15: pb.GetRevtrResp
	(*GetRevtrBatchStatusReq)(nil),       // 16: pb.GetRevtrBatchStatusReq
	(*GetRevtrBatchStatusResp)(nil),      // 17: pb.GetRevtrBatchStatusResp
	(*UpdateRevtrReq)(nil),               // 18: pb.UpdateRevtrReq
	(*UpdateRevtrResp)(nil),              // 19: pb.UpdateRevtrResp
	(*GetSourcesReq)(nil),                // 20: pb.GetSourcesReq
	(*GetSourcesResp)(nil),               // 21: pb.GetSourcesResp
	(*Source)(nil),                       // 22: pb.Source
	(*ReverseTracerouteMetaOnly)(nil),    // 23: pb.ReverseTracerouteMetaOnly
	(*ReverseTraceroute)(nil),            // 24: pb.ReverseTraceroute
	(*Stats)(nil),                        // 25: pb.Stats
	(*RankedSpoofers)(nil),               // 26: pb.RankedSpoofers
	(*RankedSpoofer)(nil),                // 27: pb.RankedSpoofer
	(*RevtrHop)(nil),                     // 28: pb.RevtrHop
	(*RevtrUser)(nil),                    // 29: pb.RevtrUser
	(*CleanAtlasReq)(nil),                // 30: pb.CleanAtlasReq
	(*CleanAtlasResp)(nil),               // 31: pb.CleanAtlasResp
	(*RunAtlasReq)(nil),                  // 32: pb.RunAtlasReq
	(*RunAtlasResp)(nil),                 // 33: pb.RunAtlasResp
	nil,                                  // 34: pb.ReverseTraceroute.RankedSpoofersByHopEntry
	(*durationpb.Duration)(nil),          // 35: google.protobuf.Duration
}
var file_revtr_proto_depIdxs = []int32{
	6,  // 0: pb.RevtrMeasurement.atlas_options:type_name -> pb.AtlasOptions
	7,  // 1: pb.RevtrMeasurement.symmetry_options:type_name -> pb.SymmetryOptions
	5,  // 2: pb.RevtrMeasurement.heuristics_options:type_name -> pb.RRHeuristicsOptions
	4,  // 3: pb.RevtrMeasurement.check_dest_based_routing_options:type_name -> pb.CheckDestBasedRoutingOptions
	3,  // 4: pb.RunRevtrReq.revtrs:type_name -> pb.RevtrMeasurement
	24, // 5: pb.GetRevtrByLabelResp.revtrs:type_name -> pb.ReverseTraceroute
	23, // 6: pb.GetRevtrMetaOnlyResp.revtrs_meta:type_name -> pb.ReverseTracerouteMetaOnly
	24, // 7: pb.GetRevtrResp.revtrs:type_name -> pb.ReverseTraceroute
	2,  // 8: pb.GetRevtrBatchStatusResp.revtrs_status:type_name -> pb.RevtrStatus
	22, // 9: pb.GetSourcesResp.srcs:type_name -> pb.Source
	2,  // 10: pb.ReverseTracerouteMetaOnly.status:type_name -> pb.RevtrStatus
	2,  // 11: pb.ReverseTraceroute.status:type_name -> pb.RevtrStatus
	28, // 12: pb.ReverseTraceroute.path:type_name -> pb.RevtrHop
	25, // 13: pb.ReverseTraceroute.stats:type_name -> pb.Stats
	34, // 14: pb.ReverseTraceroute.ranked_spoofers_by_hop:type_name -> pb.ReverseTraceroute.RankedSpoofersByHopEntry
	35, // 15: pb.Stats.ts_duration:type_name -> google.protobuf.Duration
	35, // 16: pb.Stats.rr_duration:type_name -> google.protobuf.Duration
	35, // 17: pb.Stats.tr_to_src_duration:type_name -> google.protobuf.Duration
	35, // 18: pb.Stats.assume_symmetric_duration:type_name -> google.protobuf.Duration
	35, // 19: pb.Stats.background_trs_duration:type_name -> google.protobuf.Duration
	35, // 20: pb.Stats.dest_based_check_duration:type_name -> google.protobuf.Duration
	27, // 21: pb.RankedSpoofers.ranked_spoofers:type_name -> pb.RankedSpoofer
	0,  // 22: pb.RevtrHop.type:type_name -> pb.RevtrHopType
	1,  // 23: pb.RevtrHop.dest_based_routing_type:type_name -> pb.DestinationBasedRoutingType
	26, // 24: pb.ReverseTraceroute.RankedSpoofersByHopEntry.value:type_name -> pb.RankedSpoofers
	8,  // 25: pb.Revtr.RunRevtr:input_type -> pb.RunRevtrReq
	10, // 26: pb.Revtr.GetRevtr:input_type -> pb.GetRevtrReq
	11, // 27: pb.Revtr.GetRevtrByLabel:input_type -> pb.GetRevtrByLabelReq
	13, // 28: pb.Revtr.GetRevtrMetaOnly:input_type -> pb.GetRevtrMetaOnlyReq
	16, // 29: pb.Revtr.GetRevtrBatchStatus:input_type -> pb.GetRevtrBatchStatusReq
	18, // 30: pb.Revtr.UpdateRevtr:input_type -> pb.UpdateRevtrReq
	20, // 31: pb.Revtr.GetSources:input_type -> pb.GetSourcesReq
	30, // 32: pb.Revtr.CleanAtlas:input_type -> pb.CleanAtlasReq
	32, // 33: pb.Revtr.RunAtlas:input_type -> pb.RunAtlasReq
	9,  // 34: pb.Revtr.RunRevtr:output_type -> pb.RunRevtrResp
	15, // 35: pb.Revtr.GetRevtr:output_type -> pb.GetRevtrResp
	12, // 36: pb.Revtr.GetRevtrByLabel:output_type -> pb.GetRevtrByLabelResp
	14, // 37: pb.Revtr.GetRevtrMetaOnly:output_type -> pb.GetRevtrMetaOnlyResp
	17, // 38: pb.Revtr.GetRevtrBatchStatus:output_type -> pb.GetRevtrBatchStatusResp
	19, // 39: pb.Revtr.UpdateRevtr:output_type -> pb.UpdateRevtrResp
	21, // 40: pb.Revtr.GetSources:output_type -> pb.GetSourcesResp
	31, // 41: pb.Revtr.CleanAtlas:output_type -> pb.CleanAtlasResp
	33, // 42: pb.Revtr.RunAtlas:output_type -> pb.RunAtlasResp
	34, // [34:43] is the sub-list for method output_type
	25, // [25:34] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_revtr_proto_init() }
func file_revtr_proto_init() {
	if File_revtr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_revtr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevtrMeasurement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDestBasedRoutingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRHeuristicsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtlasOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetryOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRevtrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRevtrResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevtrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevtrByLabelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevtrByLabelResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevtrMetaOnlyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevtrMetaOnlyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevtrResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevtrBatchStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevtrBatchStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRevtrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRevtrResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSourcesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSourcesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseTracerouteMetaOnly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseTraceroute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankedSpoofers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankedSpoofer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevtrHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevtrUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanAtlasReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanAtlasResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunAtlasReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_revtr_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunAtlasResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_revtr_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_revtr_proto_goTypes,
		DependencyIndexes: file_revtr_proto_depIdxs,
		EnumInfos:         file_revtr_proto_enumTypes,
		MessageInfos:      file_revtr_proto_msgTypes,
	}.Build()
	File_revtr_proto = out.File
	file_revtr_proto_rawDesc = nil
	file_revtr_proto_goTypes = nil
	file_revtr_proto_depIdxs = nil
}
